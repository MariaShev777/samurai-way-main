{"version":3,"file":"static/js/528.154977de.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wallpaper\":\"ProfileInfo_wallpaper__y7EnZ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__+Hix5\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [status, setStatus] = useState<string>(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n\r\n   const activateEditMode = () => {\r\n       setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"---------\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport userPhoto from '../../../assets/images/noname.png'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nexport type ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\n\r\nconst ProfileInfo:React.FC<ProfileInfoType> = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.wallpaper}>\r\n                <img\r\n                    src=\"https://thumbs.dreamstime.com/b/cat-seamless-pattern-kitten-vector-calico-neko-breed-yarn-ball-character-cartoon-pet-tile-background-repeat-wallpaper-animal-242401729.jpg\"\r\n                    width=\"900px\" height=\"300px\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} width='170px'/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__rpM84\",\"posts\":\"MyPosts_posts__Skefa\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Qmn6K\",\"likes\":\"Post_likes__HlpcB\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\n\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\nconst Post = (props: PostType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://www.surfertoday.com/images/stories/surfingdog.jpg\"/>\r\n            {props.message}\r\n            <div className={s.likes}>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profileReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[]\r\n    addPost: (ewPostText: string) => void\r\n}\r\n\r\n// shouldComponentUpdate(nextProps: Readonly<MyPostsPropsType>, nextState: Readonly<{}>): boolean {\r\n//     return nextProps !== this.props || nextState !== this.state;\r\n// } // это для просто Component, а не PureComponent\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let postsElement = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}\r\n                                                  id={p.id}/>)\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onAddPost = (values: AddNewPostFormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddNewPostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm:React.FC<InjectedFormProps<AddNewPostFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newPostText' component={TextArea} placeholder='Post message' validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormDataType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profileReducer\";\r\n\r\n\r\n\r\nexport type PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst Profile = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React, {useEffect} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusTC, getUserProfileTC, ProfileType, updateStatusTC} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport { RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string;\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorisedUserId: number\r\n    isAuth: boolean\r\n\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfileTC: (userId: number) => void\r\n    getStatusTC: (userId: number) => void\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nfunction ProfileContainer (props: PropsType) {\r\n\r\n    useEffect(() => {\r\n        let userId = +props.match.params.userId;\r\n        if (!userId) {\r\n            userId = props.authorisedUserId;\r\n            if (!userId) {\r\n                props.history.push('/login')\r\n            }\r\n        }\r\n\r\n\r\n\r\n        props.getUserProfileTC(userId)\r\n        props.getStatusTC(userId)\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Profile {...props} profile={props.profile} status={props.status} updateStatus={props.updateStatusTC}/>\r\n    )\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType):MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileTC, getStatusTC, updateStatusTC}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer) as React.ComponentClass\r\n\r\n\r\n\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsForRedirectType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","className","s","src","width","height","photos","large","userPhoto","Preloader","message","likesCount","MyPosts","React","postsElement","posts","map","p","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","TextArea","placeholder","validate","required","connect","state","profilePage","dispatch","addPostActionCreator","compose","authorisedUserId","auth","isAuth","getUserProfileTC","getStatusTC","updateStatusTC","withRouter","withAuthRedirect","userId","match","params","history","push","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}