{"version":3,"file":"static/js/338.9e245903.chunk.js","mappings":"0KACA,G,QAA4B,8BAA5B,EAA0E,kCAA1E,EAAqH,0BAArH,EAA0J,4BAA1J,EAAiM,4BAAjM,EAAuO,2B,SCgBvO,EAPgB,SAACA,GACb,OACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMG,W,UCU1C,EAZqB,SAACH,GAClB,IAAII,EAAO,cAAgBJ,EAAMK,GAEjC,OACI,gBAAKJ,UAAWC,EAAa,IAAMA,EAAnC,UACI,SAAC,KAAD,CAASI,GAAIF,EAAb,SAAoBJ,EAAMO,U,uCCNhCC,GAAcC,EAAAA,EAAAA,GAAiB,IAexBC,GAAsBC,EAAAA,EAAAA,GAA2B,CAACC,KAAM,0BAAlCD,EAbkC,SAACX,GAClE,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAcD,KAAK,aAAaa,YAAY,uBAEjG,0BACI,6CCehB,EAzBkB,SAACpB,GAEf,IAAIqB,EAAQrB,EAAMsB,cAEdC,EAAoBF,EAAMG,UAAUC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAcnB,KAAMmB,EAAEnB,KAAiBF,GAAIqB,EAAErB,IAAZqB,EAAErB,OAChFsB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAS1B,QAAS0B,EAAE1B,QAASE,GAAIwB,EAAExB,QAOlF,OACI,iBAAKJ,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SAAmCqB,KACnC,iBAAKtB,UAAWC,EAAhB,WACI,yBAAMyB,KACN,SAACjB,EAAD,CAAqBG,SAVb,SAACiB,GACjB9B,EAAM+B,YAAYD,EAAOE,sB,6BCkBjC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAhBoB,SAACb,GACrB,MAAO,CACHC,cAAeD,EAAMC,kBAIF,SAACa,GACxB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,GAAmBJ,SAQpCK,EAAAA,EAFJ,CAGEC,I,gIC3BEC,EAA6B,SAAClB,GAAD,MAA0D,CACvFmB,OAAQnB,EAAMoB,KAAKD,SAIhB,SAASH,EAAoBK,GAchC,OAHqCR,EAAAA,EAAAA,IAAQK,EAARL,EATX,SAAClC,GAEvB,IAAKwC,EAAwBxC,EAAxBwC,OAAWG,GAAhB,OAA6B3C,EAA7B,GACA,OAAKwC,GAEE,SAACE,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAUrC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogues/Dialogues.module.css?d141","components/Dialogues/Message/Message.tsx","components/Dialogues/DialogueItem/DialogueItem.tsx","components/Dialogues/AddMessageForm/AddMessageForm.tsx","components/Dialogues/Dialogues.tsx","components/Dialogues/DialoguesContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogues\":\"Dialogues_dialogues__skl0d\",\"dialoguesItems\":\"Dialogues_dialoguesItems__QxerT\",\"active\":\"Dialogues_active__uDwZ5\",\"dialogue\":\"Dialogues_dialogue__cJ4TG\",\"messages\":\"Dialogues_messages__kdoTv\",\"message\":\"Dialogues_message__NuHHt\"};","import React from \"react\";\r\nimport s from \"./../Dialogues.module.css\";\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./../Dialogues.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogueItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogueItem = (props: DialogueItemType) => {\r\n    let path = \"/dialogues/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialogue + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogueItem;","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nexport type AddFormDataType = {\r\n    newMessage: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} validate={[required, maxLength50]} name='newMessage' placeholder=\"Enter a message\"/>\r\n            </div>\r\n            <div>\r\n                <button>SEND</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<AddFormDataType>({form: 'dialogueAddMessageForm'})(AddMessageForm)","import React from \"react\";\r\nimport s from \"./Dialogues.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogueItem from \"./DialogueItem/DialogueItem\";\r\nimport {DialoguesPropsType} from \"./DialoguesContainer\";\r\nimport {AddFormDataType, AddMessageFormRedux} from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\nconst Dialogues = (props: DialoguesPropsType) => {\r\n\r\n    let state = props.dialoguesPage;\r\n\r\n    let dialoguesElements = state.dialogues.map(d => <DialogueItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} id={m.id}/>)\r\n\r\n    let addNewMessage = (values: AddFormDataType) => {\r\n        props.sendMessage(values.newMessage);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogues}>\r\n            <div className={s.dialoguesItems}>{dialoguesElements}</div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n)\r\n}\r\n\r\n\r\n\r\nexport default Dialogues;","import React from \"react\";\r\nimport {DialoguesPageType, sendMessageCreator} from \"../../redux/dialoguesReducer\";\r\nimport Dialogues from \"./Dialogues\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialoguesPage: DialoguesPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\nexport type DialoguesPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialoguesPage: state.dialoguesPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessage: string) => {\r\n            dispatch(sendMessageCreator(newMessage));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogues)\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsForRedirectType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}"],"names":["props","className","s","message","path","id","to","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","state","dialoguesPage","dialoguesElements","dialogues","map","d","messagesElements","messages","m","values","sendMessage","newMessage","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogues","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}